# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'ru'
    photo_directory: '/images/products'
    firm_photo_directory: '/images/mainPage'
    senderEmail: 'jul_ungoliant@mail.ru'
    adminEmail: '%env(ADMIN_EMAIL)%'
    rootPath: '%kernel.root_dir%'
    recapchaKey: '%env(RECAPCHA_KEY)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
        bind: 
            $adminEmail: '%adminEmail%'
            $rootPath: '%kernel.root_dir%'
            $recapchaKey: '%recapchaKey%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    
    admin.product:
        class: App\Admin\ProductAdmin
        arguments: [~, App\Entity\Product, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Товар }
        public: true
    
    admin.firm:
        class: App\Admin\FirmAdmin
        arguments: [~, App\Entity\Firm, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Фирма }
        public: true
        
    admin.color:
        class: App\Admin\ColorAdmin
        arguments: [~, App\Entity\Color, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Цвет }
        public: true
    
    admin.category:
        class: App\Admin\CategoryAdmin
        arguments: [~, App\Entity\Category, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Категория }
        public: true
        
    App\EventListener\ExceptionListener:
        tags:
          - { name: kernel.event_listener, event: kernel.exception }